/*
 * Copyright (c) 2009-2012 Xilinx, Inc.  All rights reserved.
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include<stdio.h>
#include"xparameters.h"
#include"xuartlite.h"
#include"xuartlite_i.h"
#include"xbasic_types.h"
#include"xstatus.h"

#define buffersize 11
#define uart_id        XPAR_UARTLITE_1_DEVICE_ID
#define uart_baseadd   XPAR_UARTLITE_1_BASEADDR

XUartLite Uart;

 u8 C;
 u8 RecvBuffer[buffersize]={0};
 u8 *RecvBufferPtr=&RecvBuffer[0];
 int i;

 void resetbuffer();
 void printbuffer();
 void delay(int n);

 //start the main function
 int main()
 {
    int Status;

//Initialize Uart device
    Status=XUartLite_Initialize(&Uart,uart_id);
    if(Status!=XST_SUCCESS)
      xil_printf("\n....Init Failure....\n");

	XUartLite_ResetFifos(&Uart);
    while(XUartLite_IsReceiveEmpty(uart_baseadd))
	{
	   xil_printf("....Start Recieving.....\n");
	   ///let's wait for some time
	   //delay(1000);
	   RecvBuffer[0]=XUartLite_RecvByte(uart_baseadd);
	   delay(100);
	   xil_printf("....Recieved.....%c\n",RecvBuffer[0]);
	   //let's wait again
	   //delay(10);
	   //start recieving other bytes
	      if(RecvBuffer[0] == 0x02) //Look at the start of the message to determine the remaining bytes.
	      {
	    	  xil_printf("You are inside if\n");
	    	  //delay(100);
	          for(i=1;i<buffersize;i++)
			  {
	              RecvBuffer[i]=XUartLite_RecvByte(uart_baseadd);
			      //wait
			      //delay(100);
	          }
	       }

	      else
	     	   {
	             xil_printf("....Nothing was Recieve....\n");
	     		}
		//wait again
		//delay(100);
		xil_printf("....You recieve....\n");
		//delay(5);
		printbuffer(); // print the contents of the buffer.

        delay(10);
		/*xil_printf("\n...enter 0x01 if u want to stop....\n");
		delay(100);
		C=XUartLite_RecvByte(uart_baseadd);
		delay(100);
		if(C==0x01)
		{
		break;
		}
       */
	    XUartLite_ResetFifos(&Uart); // Reset the FIFOs
	    resetbuffer(); // Reset the contents of the buffer.

	    RecvBufferPtr = &RecvBuffer[0]; // Reset the pointer back to the start of the buffer.
	    //XUartLite_Recv(&Uart, RecvBufferPtr, 1); // Get ready to receive another byte.
	    delay(1000);
	}

    xil_printf(".....Loop Ended....\n");


	return 0;

 }




 ///printBuffer function
 void printbuffer()
 {
	 //xil_printf("I am in print buffer\n");
	 i=0;
    while(i<buffersize)
    {
    	xil_printf("%c",RecvBuffer[i]);
    	i++;
    	//delay(2);
    }
 }


 ///resetbuffer function
 void resetbuffer()
 {
    for(i=0;i<buffersize;i++)
	        {
	            RecvBuffer[i]=0;
	        }
 }


 //delay function

 void delay(int n)
 {
   int i;
   for(i=0;i<n;i++)
   {
   }
 }
